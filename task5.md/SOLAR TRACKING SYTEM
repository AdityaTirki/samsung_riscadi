Overview:
The Solar Tracking System will now use two Light Dependent Resistors (LDRs) to detect sunlight intensity and a servo motor to adjust the solar panel's position, with a VSD controlling the system. The LDRs will sense the light intensity on both sides of the solar panel, and the servo motor will rotate the panel accordingly using signals from the VSD.
Components Required:
2x LDR Sensors
1x Servo Motor
VSD (instead of Arduino)
Resistors (for LDR voltage dividers)
Power Supply
Breadboard and Jumper Wires
Circuit and Working:
The LDR sensors will be connected to the analog inputs of the VSD.
The servo motor will be controlled through the VSD's output signals, rotating the solar panel based on the LDR readings
CODE:
#include <soc.h>  // SoC specific header for RISC-V and GPIO configuration

#define LIGHT_THRESHOLD 500  // Light difference threshold
#define SERVO_PIN gpio0      // GPIO pin connected to servo motor

void GPIO_Config(void) {
    SoC_GPIO_InitTypeDef GPIO_InitStructure = {0};
    
    // Enable clock for GPIO and configure the servo pin as output
    SoC_APB2PeriphClockCmd(SoC_APB2Periph_GPIOA, ENABLE);
    GPIO_InitStructure.GPIO_Pin = SERVO_PIN;
    GPIO_InitStructure.GPIO_Mode = SoC_GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = SoC_GPIO_Speed_50MHz;
    SoC_GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void ADC_Config(void) {
    SoC_ADC_InitTypeDef ADC_InitStructure = {0};
    
    // Enable clock for ADC and configure the LDR channels
    SoC_APB2PeriphClockCmd(SoC_APB2Periph_ADC1, ENABLE);
    ADC_InitStructure.ADC_Mode = SoC_ADC_Mode_Independent;
    ADC_InitStructure.ADC_ScanConvMode = DISABLE;
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
    ADC_InitStructure.ADC_DataAlign = SoC_ADC_DataAlign_Right;
    ADC_InitStructure.ADC_NbrOfChannel = 2;  // Two LDR channels
    SoC_ADC_Init(ADC1, &ADC_InitStructure);
    
    // Configure channels for LDRs
    SoC_ADC_RegularChannelConfig(ADC1, SoC_ADC_Channel_0, 1, SoC_ADC_SampleTime_55Cycles5);  // Left LDR
    SoC_ADC_RegularChannelConfig(ADC1, SoC_ADC_Channel_1, 2, SoC_ADC_SampleTime_55Cycles5);  // Right LDR
    
    // Start ADC
    SoC_ADC_Cmd(ADC1, ENABLE);
    SoC_ADC_ResetCalibration(ADC1);
    while (SoC_ADC_GetResetCalibrationStatus(ADC1));
    SoC_ADC_StartCalibration(ADC1);
    while (SoC_ADC_GetCalibrationStatus(ADC1));
    SoC_ADC_SoftwareStartConvCmd(ADC1, ENABLE);
}

int main(void) {
    uint16_t lightLeft = 0, lightRight = 0;
    uint16_t currentAngle = 90;  // Neutral starting position for servo motor
    
    SystemInit();  // Initialize the SoC system
    GPIO_Config();
    ADC_Config();
    
    while (1) {
        // Read light intensity from both LDRs
        lightLeft = SoC_ADC_GetConversionValue(ADC1);  // Left LDR
        lightRight = SoC_ADC_GetConversionValue(ADC1); // Right LDR
        
        // Compare light levels and adjust servo angle
        if (abs(lightLeft - lightRight) > LIGHT_THRESHOLD) {
            if (lightLeft > lightRight && currentAngle > 0) {
                currentAngle -= 1;  // Move servo to the left
            } else if (lightRight > lightLeft && currentAngle < 180) {
                currentAngle += 1;  // Move servo to the right
            }
            
            // Write angle to the servo pin (PWM control)
            SoC_GPIO_WriteBit(GPIOA, SERVO_PIN, currentAngle);
        }
        
        Delay_Ms(100);  // Small delay for smooth operation
    }
}

void NMI_Handler(void) {}
void HardFault_Handler(void) {
    while (1) {}
}

